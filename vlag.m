function map = vlag(varargin)
%% Prelims
ip = inputParser;
ip.addOptional('n', size(get(groot,'DefaultFigureColormap'),1));
ip.addParameter('center', 0);
ip.addParameter('clims', [-1 1]);
ip.addParameter('mode', 'trimmed', @(x) ismember(x, {'trimmed', 'complete'}));
ip.addParameter('Parent', get(groot,'CurrentFigure'));

ip.parse(varargin{:});
n = ip.Results.n; 
clims = ip.Results.clims;
mode = ip.Results.mode; autoscaleColors = strcmpi(mode, 'trimmed');
Parent = ip.Results.Parent();


%% Sort out inputs (n, clim, colors)
ipiud = @(fieldname) any(strcmp( ip.UsingDefaults , fieldname ));
if ipiud('n')     && ~isempty(Parent) && isprop(Parent, 'Colormap'); n = height(get(Parent, 'Colormap')); end
if ipiud('clims') && ~isempty(Parent) && isprop(Parent, 'CLim');     clims = get(Parent, 'CLim');         end
clims = clims - ip.Results.center;

values = [...
	0.138500	0.413312	0.740520
	0.150776	0.417627	0.739704
	0.162352	0.421919	0.738967
	0.173332	0.426190	0.738325
	0.183825	0.430442	0.737768
	0.193940	0.434677	0.737259
	0.203671	0.438896	0.736853
	0.213136	0.443100	0.736480
	0.222312	0.447291	0.736197
	0.231251	0.451469	0.735978
	0.239981	0.455637	0.735822
	0.248534	0.459795	0.735715
	0.256914	0.463944	0.735669
	0.265139	0.468085	0.735683
	0.273222	0.472218	0.735755
	0.281175	0.476346	0.735883
	0.289010	0.480468	0.736067
	0.296736	0.484586	0.736304
	0.304361	0.488700	0.736595
	0.311895	0.492811	0.736933
	0.319354	0.496918	0.737309
	0.326727	0.501025	0.737740
	0.334026	0.505130	0.738219
	0.341253	0.509234	0.738749
	0.348409	0.513339	0.739334
	0.355518	0.517444	0.739946
	0.362568	0.521549	0.740608
	0.369564	0.525657	0.741313
	0.376499	0.529766	0.742077
	0.383403	0.533878	0.742863
	0.390259	0.537993	0.743696
	0.397068	0.542111	0.744578
	0.403840	0.546233	0.745499
	0.410582	0.550358	0.746451
	0.417284	0.554489	0.747452
	0.423952	0.558625	0.748494
	0.430596	0.562765	0.749564
	0.437204	0.566912	0.750684
	0.443791	0.571065	0.751834
	0.450351	0.575223	0.753023
	0.456878	0.579390	0.754263
	0.463397	0.583562	0.755518
	0.469888	0.587742	0.756820
	0.476356	0.591930	0.758162
	0.482811	0.596125	0.759532
	0.489237	0.600330	0.760954
	0.495662	0.604542	0.762389
	0.502061	0.608763	0.763874
	0.508451	0.612993	0.765386
	0.514826	0.617233	0.766935
	0.521184	0.621482	0.768524
	0.527536	0.625741	0.770139
	0.533868	0.630011	0.771802
	0.540202	0.634290	0.773480
	0.546513	0.638582	0.775213
	0.552830	0.642882	0.776956
	0.559126	0.647195	0.778753
	0.565426	0.651518	0.780566
	0.571709	0.655854	0.782427
	0.577996	0.660201	0.784308
	0.584268	0.664561	0.786235
	0.590544	0.668932	0.788181
	0.596808	0.673316	0.790174
	0.603076	0.677713	0.792186
	0.609341	0.682122	0.794230
	0.615595	0.686545	0.796320
	0.621856	0.690981	0.798429
	0.628107	0.695432	0.800584
	0.634364	0.699895	0.802758
	0.640614	0.704373	0.804976
	0.646871	0.708865	0.807216
	0.653122	0.713372	0.809497
	0.659378	0.717893	0.811804
	0.665633	0.722429	0.814146
	0.671892	0.726980	0.816519
	0.678153	0.731546	0.818921
	0.684414	0.736128	0.821361
	0.690683	0.740725	0.823824
	0.696948	0.745339	0.826332
	0.703224	0.749967	0.828858
	0.709496	0.754614	0.831432
	0.715777	0.759276	0.834029
	0.722063	0.763955	0.836659
	0.728352	0.768651	0.839324
	0.734652	0.773363	0.842012
	0.740949	0.778094	0.844750
	0.747257	0.782842	0.847509
	0.753571	0.787607	0.850302
	0.759890	0.792391	0.853132
	0.766220	0.797192	0.855987
	0.772550	0.802013	0.858887
	0.778892	0.806851	0.861813
	0.785246	0.811708	0.864767
	0.791598	0.816585	0.867769
	0.797965	0.821480	0.870796
	0.804342	0.826395	0.873853
	0.810722	0.831330	0.876954
	0.817113	0.836284	0.880086
	0.823515	0.841259	0.883250
	0.829928	0.846253	0.886446
	0.836344	0.851268	0.889688
	0.842773	0.856303	0.892957
	0.849212	0.861358	0.896261
	0.855662	0.866432	0.899595
	0.862115	0.871526	0.902972
	0.868575	0.876639	0.906382
	0.875042	0.881766	0.909819
	0.881512	0.886908	0.913285
	0.887979	0.892059	0.916775
	0.894439	0.897213	0.920285
	0.900882	0.902363	0.923806
	0.907298	0.907498	0.927328
	0.913670	0.912603	0.930838
	0.919981	0.917661	0.934319
	0.926206	0.922648	0.937746
	0.932317	0.927535	0.941092
	0.938278	0.932289	0.944323
	0.944048	0.936869	0.947401
	0.949583	0.941231	0.950277
	0.954827	0.945325	0.952911
	0.959725	0.949097	0.955251
	0.964226	0.952493	0.957233
	0.968262	0.955458	0.958822
	0.971785	0.957940	0.959957
	0.974741	0.959891	0.960600
	0.977086	0.961274	0.960719
	0.978779	0.962058	0.960301
	0.979785	0.962229	0.959355
	0.980600	0.961552	0.958131
	0.981526	0.959937	0.956393
	0.981973	0.957666	0.953993
	0.981919	0.954787	0.950981
	0.981385	0.951348	0.947406
	0.980408	0.947399	0.943321
	0.979021	0.943001	0.938787
	0.977293	0.938204	0.933851
	0.975253	0.933073	0.928583
	0.972978	0.927653	0.923023
	0.970491	0.922003	0.917235
	0.967844	0.916167	0.911261
	0.965073	0.910187	0.905141
	0.962220	0.904092	0.898908
	0.959308	0.897915	0.892591
	0.956356	0.891679	0.886217
	0.953383	0.885404	0.879802
	0.950402	0.879103	0.873363
	0.947422	0.872789	0.866911
	0.944452	0.866469	0.860453
	0.941505	0.860146	0.853992
	0.938574	0.853828	0.847536
	0.935662	0.847518	0.841089
	0.932772	0.841216	0.834652
	0.929901	0.834927	0.828227
	0.927047	0.828650	0.821817
	0.924227	0.822381	0.815413
	0.921426	0.816124	0.809024
	0.918645	0.809880	0.802648
	0.915876	0.803652	0.796290
	0.913137	0.797431	0.789940
	0.910416	0.791223	0.783604
	0.907711	0.785027	0.777282
	0.905016	0.778847	0.770977
	0.902354	0.772671	0.764678
	0.899702	0.766510	0.758395
	0.897053	0.760365	0.752131
	0.894440	0.754223	0.745870
	0.891834	0.748095	0.739627
	0.889232	0.741982	0.733401
	0.886659	0.735873	0.727180
	0.884088	0.729779	0.720977
	0.881535	0.723693	0.714785
	0.878994	0.717618	0.708605
	0.876452	0.711558	0.702444
	0.873940	0.705499	0.696285
	0.871426	0.699455	0.690146
	0.868927	0.693419	0.684016
	0.866436	0.687392	0.677899
	0.863944	0.681379	0.671799
	0.861476	0.675367	0.665704
	0.858999	0.669372	0.659629
	0.856547	0.663378	0.653558
	0.854088	0.657398	0.647505
	0.851644	0.651422	0.641460
	0.849201	0.645456	0.635429
	0.846764	0.639498	0.629410
	0.844332	0.633548	0.623403
	0.841901	0.627606	0.617409
	0.839479	0.621670	0.611424
	0.837054	0.615743	0.605455
	0.834640	0.609820	0.599492
	0.832219	0.603907	0.593547
	0.829810	0.597996	0.587608
	0.827403	0.592091	0.581679
	0.824986	0.586197	0.575769
	0.822582	0.580303	0.569863
	0.820166	0.574421	0.563975
	0.817763	0.568537	0.558092
	0.815346	0.562666	0.552227
	0.812943	0.556791	0.546365
	0.810521	0.550930	0.540524
	0.808115	0.545063	0.534685
	0.805690	0.539210	0.528866
	0.803275	0.533353	0.523051
	0.800847	0.527506	0.517253
	0.798422	0.521658	0.511462
	0.795994	0.515812	0.505682
	0.793558	0.509971	0.499914
	0.791126	0.504127	0.494153
	0.788674	0.498294	0.488411
	0.786231	0.492454	0.482672
	0.783769	0.486623	0.476952
	0.781308	0.480788	0.471238
	0.778845	0.474952	0.465532
	0.776363	0.469122	0.459845
	0.773884	0.463286	0.454161
	0.771389	0.457455	0.448494
	0.768889	0.451620	0.442836
	0.766388	0.445779	0.437183
	0.763861	0.439948	0.431552
	0.761335	0.434107	0.425925
	0.758806	0.428258	0.420305
	0.756249	0.422419	0.414707
	0.753692	0.416569	0.409113
	0.751127	0.410711	0.403528
	0.748543	0.404855	0.397959
	0.745947	0.398993	0.392401
	0.743343	0.393122	0.386851
	0.740733	0.387239	0.381307
	0.738094	0.381361	0.375786
	0.735447	0.375471	0.370271
	0.732789	0.369570	0.364765
	0.730118	0.363658	0.359270
	0.727435	0.357733	0.353785
	0.724727	0.351805	0.348317
	0.722005	0.345864	0.342859
	0.719271	0.339906	0.337410
	0.716520	0.333934	0.331972
	0.713754	0.327946	0.326545
	0.710970	0.321941	0.321130
	0.708168	0.315919	0.315726
	0.705348	0.309877	0.310334
	0.702509	0.303815	0.304954
	0.699652	0.297730	0.299585
	0.696775	0.291621	0.294227
	0.693884	0.285481	0.288878
	0.690976	0.279310	0.283538
	0.688035	0.273120	0.278219
	0.685079	0.266891	0.272907
	0.682108	0.260621	0.267602
	0.679110	0.254318	0.262314
	0.676094	0.247968	0.257034
	0.673059	0.241568	0.251762
	0.670002	0.235119	0.246503
	0.666934	0.228599	0.241244
	0.663844	0.222017	0.235996
	0.660807	0.215267	0.230695

    ];
m = ceil(size(values,1)/2);


%% Calculations
if (clims(1) < 0) && (clims(2) > 0)

    r = abs(clims(1)) / clims(2); % Ratio of neg to pos
    neglen = round( n*r/(r+1) ) + (r<1); % favour the smaller half
    poslen = n - neglen + 1;

    % Just negative
    neglim = clims(1) - (autoscaleColors && r < 1)*sum(clims); % clims(1) or -clims(2)
    negmap = interp1( linspace( neglim,0,m), values( 1:m           , : ), linspace(clims(1),0,neglen) );

    % Just positive
    poslim = clims(2) - (autoscaleColors && r > 1)*sum(clims); % clims(2) or -clims(1)
    posmap = interp1( linspace( 0,poslim,m), values( (end-m+1):end , : ), linspace(0,clims(2),poslen) );

    % And put 'em together
    map = [negmap; posmap(2:end,:)];

else
    if clims(1) >= 0; map = values( (end-m+1):end , : ); % Just positive
    else; map = values(1:m,:); end % Just negative
    map = interp1(linspace(0, 1, m), map, linspace(0, 1, n));
end

map = min(max(map, 0), 1);


end
